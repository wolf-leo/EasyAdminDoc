{"./":{"url":"./","title":"项目简介","keywords":"","body":"项目介绍演示站点项目特性特别感谢BUG反馈版权信息QQ交流群项目介绍 EasyAdmin是基于ThinkPHP6.0+Layui的快速开发的后台管理系统。 演示站点 演示地址：http://easyadmin.99php.cn/admindemo（账号：guest，密码：123456。备注：只有查看信息的权限） 项目特性 完善的菜单管理 分模块管理 无限极菜单 菜单编辑会提示权限节点 基于auth的权限管理系统 通过注解方式来实现auth权限节点管理 具备一键更新auth权限节点，无需手动输入管理 完善的后端权限验证以及前面页面按钮显示、隐藏控制 完善的上传组件功能 本地存储 阿里云OSS建议使用 腾讯云COS 七牛云OSS 完善的前端组件功能 对layui的form表单重新封装，无需手动拼接数据请求 简单好用的图片、文件上传组件 简单好用的富文本编辑器ckeditor 对弹出层进行再次封装，以极简的方式使用 对table表格再次封装，在使用上更加舒服 根据table的cols参数再次进行封装，提供接口实现image、switch、list等功能，再次基础上可以自己再次扩展 根据table参数一键生成搜索表单，无需自己编写 完善的后台操作日志 记录用户的详细操作信息 按月份进行分表记录 一键部署静态资源到OSS上 所有在public\\static目录下的文件都可以一键部署 一个配置项切换静态资源（oss/本地） 上传文件记录管理 后台路径自定义，防止别人找到对应的后台地址 特别感谢 以下项目排名不分先后 ThinkPHP：https://github.com/top-think/framework Layuimini：https://github.com/zhongshaofa/layuimini Annotations：https://github.com/doctrine/annotations Layui：https://github.com/sentsin/layui Jquery：https://github.com/jquery/jquery RequireJs：https://github.com/requirejs/requirejs WangEditor：https://github.com/wangfupeng1988/wangEditor Echarts：https://github.com/apache/incubator-echarts BUG反馈 项目使用过程成，如遇到BUG，可通过以下途径进行反馈。 GitHub:https://github.com/zhongshaofa/easyadmin/issues Gitee:https://gitee.com/zhongshaofa/easyadmin QQ群:763822524 版权信息 EasyAdmin遵循MIT开源协议发布，并提供免费使用。 QQ交流群 763822524 加群请备注来源：如gitee、github、官网等。 © zhongshaofa all right reserved，powered by Gitbook文件修订时间： 2020-05-15 22:09:53 "},"base/install.html":{"url":"base/install.html","title":"系统安装","keywords":"","body":"环境要求git下载伪静态配置环境要求 PHP >= 7.1.0 Mysql >= 5.7.0 (需支持innodb引擎) Apache 或 Nginx git下载 使用git克隆资源下来 git clone https://github.com/zhongshaofa/easyadmin git clone https://gitee.com/zhongshaofa/easyadmin 将网站入口部署至public目录下面（即easyadmin/public目录下） 修改伪静态配置, 请参考下方伪静态设置。 手动安装主目录下的easyadmin.sql的数据库文件 运行网站地址, 会自动进入安装界面, 请根据提示进行设置, 然后点击安装。 安装完成后会自动生成安装锁config/install/lock/install.lock, 如需重新安装, 删掉该文件即可。 伪静态配置 通过伪静态配置, 将URL重写隐藏应用的入口文件index.php, 不配置的话, 会存在访问路径不正确的问题。 Apache 把下面的内容保存为.htaccess文件放到应用入口public文件的同级目录下 Options +FollowSymlinks -Multiviews RewriteEngine On RewriteCond %{REQUEST_FILENAME} !-d RewriteCond %{REQUEST_FILENAME} !-f RewriteRule ^(.*)$ index.php/$1 [QSA,PT,L] Nginx 在Nginx低版本中，是不支持PATHINFO的，但是可以通过在Nginx.conf中配置转发规则实现 location / { if (!-e $request_filename) { rewrite ^(.*)$ /index.php?s=/$1 last; } } © zhongshaofa all right reserved，powered by Gitbook文件修订时间： 2020-05-15 22:09:53 "},"base/architecture.html":{"url":"base/architecture.html","title":"系统架构","keywords":"","body":"架构总览架构总览 EasyAdmin项目目录 ├── addons //插件存放目录 ├── app //应用目录 │ ├── admin //后台管理应用模块 │ │ ├── config //后台配置项目录 │ │ ├── controller //后台控制器目录 │ │ ├── middleware //后台中间件目录 │ │ ├── model //后台模型目录 │ │ ├── service //后台服务类目录 │ │ ├── traits //后台trait目录 │ │ ├── view //后台视图目录 │ ├── common //通用应用模块 │ ├── BaseController.php //控制器基础类 │ ├── common.php //应用公共文件 │ ├── event.php //事件定义文件 │ ├── ExceptionHandle.php //应用异常处理类 │ ├── middleware.php //全局中间件定义文件 │ ├── provider.php //容器Provider定义文件 │ ├── Request.php //应用请求对象类 ├── config //配置项目录 ├── public │ ├── static │ │ ├── admin //后台静态资源 │ │ │ ├── css //后台自义定CSS │ │ │ ├── fonts //后台自义定字体 │ │ │ ├── images //后台相关图片资源 │ │ │ ├── js //后台js, 与后台控制器是一一对应的 │ │ ├── common //公共资源 │ │ ├── plugs //插件资源 │ └── uploads //上传文件目录 │ ├── index.php //应用入口主文件 │ └── router.php ├── route //路由目录 ├── runtime //缓存目录 ├── vendor //Compposer资源包位置 │ ├── zhongshaofa │ │ ├── easy-addons //插件扩展 │ │ ├── easy-admin //后台扩展 ├── view │ │ ├── index //前台视图页面 ├── LICENSE ├── README.md ├── easyadmin.sql //数据库安装文件 ├── build.php ├── composer.json //Composer包配置 └── think © zhongshaofa all right reserved，powered by Gitbook文件修订时间： 2020-05-15 22:09:53 "},"database/database.html":{"url":"database/database.html","title":"数据库规范","keywords":"","body":"表名规范字段规范表名规范 好的表命名规范会让你开发起来更加心情开朗，下面是一些建议： 命名规则 前缀 + 模块名 + 表标识 例如系统模块： ea_system_admin ea_system_config 例如博客模块： ea_blog_user ea_blog_config 字段规范 字段名使用下划线风格 字段一定要清晰, 尽量避免使用缩写命名 create_time、update_time、delete_time三个字段以int类型保存时间信息 © zhongshaofa all right reserved，powered by Gitbook文件修订时间： 2020-05-16 00:39:56 "},"config/system.html":{"url":"config/system.html","title":"系统配置","keywords":"","body":"系统配置超管配置系统配置 env配置说明 后台模块配置说明EASYADMIN 参数 说明 类型 默认 ADMIN 后台路径 string admin CAPTCHA 后台验证码开关 bool true IS_DEMO 是否为演示环境 bool false STATIC_PATH 静态资源路径 bool /static OSS_STATIC_PREFIX OSS静态文件路径前缀 bool static_easyadmin 配置示例 APP_DEBUG = true [APP] DEFAULT_TIMEZONE = Asia/Shanghai [DATABASE] TYPE = mysql HOSTNAME = host.docker.internal DATABASE = easyadmin USERNAME = root PASSWORD = root HOSTPORT = 3306 CHARSET = utf8 DEBUG = true PREFIX = ea_ [LANG] default_lang = zh-cn [EASYADMIN] ADMIN = admintest CAPTCHA = false CDN = EXAMPLE = true OSS_STATIC_PREFIX = static_easyadmin 超管配置 超管不受权限控制，默认获取所有权限 超管账号配置 配置文件位置：app/common/constants/AdminConstant.php 修改常量：SUPER_ADMIN_ID 管理员对应ID © zhongshaofa all right reserved，powered by Gitbook文件修订时间： 2020-05-15 22:09:53 "},"config/auth.html":{"url":"config/auth.html","title":"权限忽略配置","keywords":"","body":"权限忽略配置备注信息权限忽略配置 登录判断和权限验证忽略配置 配置文件位置：app/admin/config/admin.php [ 'login', ], // 不需要验证登录的节点 'no_login_node' => [ 'login/index', 'login/out', ], // 不需要验证权限的控制器 'no_auth_controller' => [ 'ajax', 'login', 'index', ], // 不需要验证权限的节点 'no_auth_node' => [ 'login/index', 'login/out', ], ]; 参数说明 参数 说明 no_login_controller 不需要验证登录的控制器 no_login_node 不需要验证登录的节点 no_auth_controller 不需要验证权限的控制器 no_auth_node 不需要验证权限的节点 备注信息 控制器和节点是一个并关系，如果控制器在二级目录下。 写法应该为：system/config （对应位置：app/admin/controller/system/Config.php） © zhongshaofa all right reserved，powered by Gitbook文件修订时间： 2020-05-15 22:09:53 "},"config/static.html":{"url":"config/static.html","title":"静态资源配置","keywords":"","body":"静态资源配置静态资源配置 目前只写了阿里云的静态资源配置。 修改静态资源为OSS，会有效减轻服务器压力，并提高资源加载速度（特别是带宽低的服务器） 步骤 在后台修改文件上传为阿里云，并修改对应的配置项 修改.env文件下的配置： EASYADMIN.STATIC_PATH：静态资源地址（例如：https://easyadmin.oss-cn-shenzhen.aliyuncs.com/static_easyadmin） EASYADMIN.OSS_STATIC_PREFIX：静态资源上传前缀（例如：static_easyadmin） 在项目的主目录下执行：php think OssStatic，就会将public/static路径下的所有静态资源上传上去 删除该目录下runtime/admin/cache的缓存资源 © zhongshaofa all right reserved，powered by Gitbook文件修订时间： 2020-05-15 22:09:53 "},"backend/controller/annotations.html":{"url":"backend/controller/annotations.html","title":"注解权限","keywords":"","body":"注解权限控制器注解权限方法节点注解权限更新权限节点注解权限 注解权限只能获取后台的控制器，也就是该app/admin/controller下 控制器注解权限 控制器类注解tag @ControllerAnnotation 注解类： EasyAdmin\\annotation\\ControllerAnnotation 作用范围： CLASS 参数说明： title 控制器的名称（必填） auth 是否开启权限控制，默认为true （选填，Enum:{true, false}） 示例 备注：注解前请先引用use EasyAdmin\\annotation\\ControllerAnnotation; 方法节点注解权限 方法节点类注解tag @NodeAnotation 注解类： EasyAdmin\\annotation\\NodeAnotation 作用范围： METHOD 参数说明： title 方法节点的名称（必填） auth 是否开启权限控制，默认为true （选填，Enum:{true, false}） 示例 备注：注解前请先引用use EasyAdmin\\annotation\\NodeAnotation; 更新权限节点 使用命令php think node进行更新权限节点。 或者在后台节点管理里面点击更新。 © zhongshaofa all right reserved，powered by Gitbook文件修订时间： 2020-05-15 22:09:53 "},"backend/controller/attributes.html":{"url":"backend/controller/attributes.html","title":"控制器属性","keywords":"","body":"控制器属性控制器属性 后台所有控制器都应该需要去继承该基类app/common/controller/AdminController.php 目前系统内部默认的属性有： 参数 说明 类型 默认 model 当前模型对象 model null relationSerach 是否关联查询 bool false sort 列表排序规则 array ['id' => 'desc'] allowModifyFileds 允许修改的字段 array ['status', 'sort', 'remark', 'is_delete', 'is_auth', 'title'] noExportFileds 不导出的字段信息 array ['delete_time', 'update_time'] selectWhere 下拉选择条件 array [] layout 模板布局, false取消 string 'layout/default' © zhongshaofa all right reserved，powered by Gitbook文件修订时间： 2020-05-15 22:09:53 "},"backend/controller/curd.html":{"url":"backend/controller/curd.html","title":"Curd引用","keywords":"","body":"Curd trait引入使用方法覆盖方法修改index()列表关联查询modify()属性修改限制Curd trait引入 后台使用Curd trait, 能大大提高开发效率以及代码的可复用性, 文件位置：app/admin/traits/Curd.php 默认的CURD方法有： 参数 说明 index 列表 add 添加 edit 编辑 del 删除 export 导出 modify 属性修改 使用方法 在类里面引入use \\app\\admin\\traits\\Curd; 在类直接引入use EasyAdmin\\annotation\\NodeAnotation;,（备注：因为方法内有使用到权限注解，至少要引入该类，不然会在节点更新的时候报出异常） 初始化当前模型 代码示例 model = new SystemConfig(); } } 覆盖方法修改 因为默认的Curd不适用你的需求，请复制app/admin/traits/Curd.php对应的方法到你的控制器下进行覆盖修改。 index()列表关联查询 修改控制器的属性relationSerach为true 模型关联请使用该方法withJoin() 代码示例控制器 model = new MallGoods(); } /** * @NodeAnotation(title=\"列表\") */ public function index() { if ($this->request->isAjax()) { if (input('selectFieds')) { return $this->selectList(); } list($page, $limit, $where) = $this->buildTableParames(); $count = $this->model ->withJoin('cate', 'LEFT') ->where($where) ->count(); $list = $this->model ->withJoin('cate', 'LEFT') ->where($where) ->page($page, $limit) ->order($this->sort) ->select(); $data = [ 'code' => 0, 'msg' => '', 'count' => $count, 'data' => $list, ]; return json($data); } return $this->fetch(); } } 代码示例模型 belongsTo('app\\admin\\model\\MallCate', 'cate_id', 'id'); } } modify()属性修改限制 为了安全，modify方法默认允许修改的字段有： status sort remark is_delete is_auth title 如果默认字段不适用你的需求请, 请在控制器下覆盖该属性allowModifyFileds值即可。 © zhongshaofa all right reserved，powered by Gitbook文件修订时间： 2020-05-15 22:09:53 "},"backend/controller/validate.html":{"url":"backend/controller/validate.html","title":"验证器使用","keywords":"","body":"验证器使用验证器使用 此验证器的使用只针对于后台控制器 需要先继承该类app\\common\\controller\\AdminController 验证规则的编写参考ThinkPHP的文档。 调用validate方法进行验证，如果验证未通过，会直接调用$this->error();方法。 代码示例 request->post(); $rule = [ 'username|用户名' => 'require', 'password|密码' => 'require', ]; $this->validate($post, $rule); $this->success('成功'); } } © zhongshaofa all right reserved，powered by Gitbook文件修订时间： 2020-05-15 22:09:53 "},"frontend/base.html":{"url":"frontend/base.html","title":"必看基础信息","keywords":"","body":"必看基础信息后台控制器与JS的绑定必看基础信息 系统做了一些封装，先查看此文档会有效解决你的疑问 后台控制器与JS的绑定 控制器中JS的目录对应为：public/static/admin/js 文件命名为: 小写+下划杠 控制器的每一个方法对应JS的Controller对象的一个属性 每一个JS文件都需要引入admin模块，并执行监听ea.listen();; 例子 控制器对应的PHP文件app/admin/controller/mall/Cate.php 控制器对应的JS文件public/static/admin/js/mall/cate.js 每一个控制里面的方法对应js里面的属性就会自动进行加载 define([\"jquery\", \"easy-admin\"], function ($, ea) { var init = { table_elem: '#currentTable', table_render_id: 'currentTableRenderId', index_url: 'mall.cate/index', add_url: 'mall.cate/add', edit_url: 'mall.cate/edit', del_url: 'mall.cate/del', export_url: 'mall.cate/export', modify_url: 'mall.cate/modify', }; var Controller = { index: function () { ea.table.render({ init: init, modifyReload: true, cols: [[ {type: \"checkbox\"}, {field: 'id', width: 80, title: 'ID'}, {field: 'sort', width: 80, title: '排序', edit: 'text'}, {field: 'title', minWidth: 80, title: '分类名称'}, {field: 'image', minWidth: 80, title: '分类图片', search: false, templet: ea.table.image}, {field: 'remark', minWidth: 80, title: '备注信息'}, {field: 'status', title: '状态', width: 85, search: 'select', selectList: {0: '禁用', 1: '启用'}, filter: 'status', templet: ea.table.switch}, {field: 'create_time', minWidth: 80, title: '创建时间', search: 'range'}, { width: 250, title: '操作', templet: ea.table.tool, operat: ['edit', 'delete'] } ]], }); ea.listen(); }, add: function () { ea.listen(); }, edit: function () { ea.listen(); }, }; return Controller; }); © zhongshaofa all right reserved，powered by Gitbook文件修订时间： 2020-05-15 22:20:46 "},"frontend/auth.html":{"url":"frontend/auth.html","title":"auth权限验证","keywords":"","body":"前端auth权限验证视图页面内权限例子table表格内权限例子完整例子前端auth权限验证 为什么前端也做权限认证，权限认证不应该是后端做的吗？ 这里的权限认证指的是前端判断是否有权限查看的数据（例如：添加、删除、编辑之类的按钮），这些只有在点击到对应的url之后，后端才会进行权限认证。 为了避免用户困扰，可以在此用上前端的权限认证，判断是否显示还是隐藏 视图页面内权限例子 第一种示例, 通过php的auth()方法生成layui-hide样式属性。 添加 第二种, 通过php的auth()方法判断, 是否显示html {if !auth('system.menu/add')} 添加 {/if} table表格内权限例子 table表格里面，一种table表格上方的操作栏toolbar需要权限判断是否显示。 另外一种是table表格里面的列操作栏operat也需要权限判断是否显示。 事先定义权限规则 需要在对应的表格的dom事先全好对应的权限规则。 权限规则为：data-auth- + 规则名 例如：data-auth-add=\"{:auth('goods.cate/add')}\", add就是对应的权限规则。 下方例子中共定义了：add edit delete stock 四种权限规则 表格上方的toolbar权限验证 下面简单讲解权限验证，完整的toolbar的使用和配置请查看table模块。 toolbar内置三个内置权限验证：add,delete,export toolbar: ['refresh','add', 'delete', 'export'] 自定义toolbar, 在auth属性上填写权限规则 toolbar: ['refresh', [{ text: ' 添加', open: init.add_url, class: 'layui-btn layui-btn-normal layui-btn-sm', icon: 'fa fa-plus ', title: '添加', auth: 'add', extend: ' data-full=\"true\"', }], 'delete', 'export'], 表格内列操作operat的权限验证 operat内置三个内置权限验证：edit,delete operat: ['edit', 'delete'] 自定义operat, 在auth属性上填写权限规则 operat: [ [{ class: 'layui-btn layui-btn-xs layui-btn-success', method: 'open', text: '编辑', auth: 'edit', url: init.edit_url, extend: 'data-full=\"true\"', }, { class: 'layui-btn layui-btn-xs layui-btn-normal', method: 'open', text: '入库', auth: 'stock', url: init.stock_url, extend: '', }], 'delete'] 完整例子 define([\"jquery\", \"easy-admin\"], function ($, ea) { var init = { table_elem: '#currentTable', table_render_id: 'currentTableRenderId', index_url: 'mall.goods/index', add_url: 'mall.goods/add', edit_url: 'mall.goods/edit', del_url: 'mall.goods/del', export_url: 'mall.goods/export', modify_url: 'mall.goods/modify', stock_url: 'mall.goods/stock', }; var Controller = { index: function () { ea.table.render({ init: init, modifyReload: true, toolbar: ['refresh', [{ text: ' 添加', open: init.add_url, class: 'layui-btn layui-btn-normal layui-btn-sm', icon: 'fa fa-plus ', title: '添加', auth: 'add', extend: ' data-full=\"true\"', }], 'delete', 'export'], cols: [[ {type: \"checkbox\"}, {field: 'id', width: 80, title: 'ID'}, {field: 'sort', width: 80, title: '排序', edit: 'text'}, {field: 'cate.title', minWidth: 80, title: '商品分类'}, {field: 'title', minWidth: 80, title: '商品名称'}, {field: 'logo', minWidth: 80, title: '分类图片', search: false, templet: ea.table.image}, {field: 'market_price', width: 100, title: '市场价', templet: ea.table.price}, {field: 'discount_price', width: 100, title: '折扣价', templet: ea.table.price}, {field: 'total_stock', width: 100, title: '库存统计'}, {field: 'stock', width: 100, title: '剩余库存'}, {field: 'virtual_sales', width: 100, title: '虚拟销量'}, {field: 'sales', width: 80, title: '销量'}, {field: 'status', title: '状态', width: 85, selectList: {0: '禁用', 1: '启用'}, templet: ea.table.switch}, {field: 'create_time', minWidth: 80, title: '创建时间', search: 'range'}, { width: 250, title: '操作', templet: ea.table.tool, operat: [ [{ class: 'layui-btn layui-btn-xs layui-btn-success', method: 'open', text: '编辑', auth: 'edit', url: init.edit_url, extend: 'data-full=\"true\"', }, { class: 'layui-btn layui-btn-xs layui-btn-normal', method: 'open', text: '入库', auth: 'stock', url: init.stock_url, extend: '', }], 'delete'] } ]], }); ea.listen(); }, add: function () { ea.listen(); }, edit: function () { ea.listen(); }, stock: function () { ea.listen(); }, }; return Controller; }); © zhongshaofa all right reserved，powered by Gitbook文件修订时间： 2020-05-16 00:51:35 "},"frontend/form.html":{"url":"frontend/form.html","title":"form表单","keywords":"","body":"form表单必填值lay-submit 事件监听提交前置操作完整例子form表单 form表单已经集成了快速验证以及提交的方法，无需手动重组数据再进行提交 默认提交的数据是提交当前url，如需提交到其它页面，修改一下lay-submit的值即可 在对应的js文件内引入easy-admin模块，并执行ea.listen();进行监听 必填值 使用lay-verify=\"required\"，会自动生成必填小红点， 并且会在提交的时候进行必填验证 权限名称 填写权限名称。 lay-submit 事件监听 使用该事件监听，会自动获取表单数据以POST方式自动提交。 与lay-submit事件监听的相关参数： 参数 说明 类型 是否必填 默认 备注 lay-submit 监听表单自动提交 string 是 当前地址 为空则提交的当前地址。如果需要提交到其它地址，此处填写对应的地址。 data-refresh 提交成功后是否需要刷新 bool 否 true 提交成功后，关闭弹出层，刷新父层的table列表，如果不需要刷新，或者没有用到弹出层，此处改为false lay-filter layui内置过滤器 string 否 自动生成唯一值 无特殊需求，此处无需填写，会自动生成 例子 确认 重置 提交前置操作 事件监听方法：ea.listen(preposeCallback, ok, no, ex)，可能用得比较多的还是preposeCallback的提交前置回调。 参数 说明 类型 是否必填 备注 preposeCallback 表单提交前的前置回调 function 否 一般用于需要重新组装一些特殊的数据再提交 ok 提交成功后的回调 function 否 no 提交失败后的回调 function 否 ex 提交异常后的回调 function 否 ea.listen(function (data) { // 此处进行数据重组再返回 data.test = '测试重组数据'; return data; }); 完整例子 权限名称 填写权限名称。 备注信息 确认 重置 © zhongshaofa all right reserved，powered by Gitbook文件修订时间： 2020-05-16 00:38:02 "},"frontend/table.html":{"url":"frontend/table.html","title":"table数据表格","keywords":"","body":"table列表init初始化配置表格实例化扩展表格参数表格toolbar列参数列operat内置templet方法table列表 虽然layui已经提供了很多方便的方法，但是还是不够简便，目前系统对layui table模块进行了重新封装，并兼容所有的layui table的方法。 使得开发起来更加得心应手，减轻工作量。 init初始化配置 建议在此处统一配置table容器以及相关的链接地址。另外还可以自己进行扩展属性。 初始化的参数有 参数 说明 类型 是否必填 备注 table_elem table容器或者dom string/dom 是 table_render_id 容器唯一 id string 否 index_url 列表接口 string 是 add_url 添加接口 string 否 需用添加功能必填 edit_url 编辑接口 string 否 需用编辑功能必填 del_url 删除接口 string 否 需用删除功能必填 export_url 导出接口 string 否 需用导出功能必填 modify_url 属性修改接口 string 否 需用属性修改功能必填（例如：状态的切换） 实例，下方stock_url就是扩展属性 var init = { table_elem: '#currentTable', table_render_id: 'currentTableRenderId', index_url: 'mall.goods/index', add_url: 'mall.goods/add', edit_url: 'mall.goods/edit', del_url: 'mall.goods/del', export_url: 'mall.goods/export', modify_url: 'mall.goods/modify', stock_url: 'mall.goods/stock', }; 表格实例化 表格实例化方法为ea.table.render(), 兼容layui table的所有功能，另外还扩展了一些新的功能。 扩展表格参数 这些是基于layui的table的进行扩展的基础参数，如需查看其他的参数，请去layui官网查看。 参数 说明 类型 是否必填 默认值 备注 init init初始化配置 object 是 一般情况下，请传入上方配置好的初始化参数 search 是否开启搜索功能 bool 否 true 开启会自动根据列生成搜索表单 modifyReload 修改属性时是否刷新表格 bool 否 true toolbar table操作栏 object 否 ['refresh','add','delete','export'] 除了这些内置的，还可以自己进行扩展 代码示例 ea.table.render({ init: init, toolbar: [...表格toolbar...], cols: [...请参考下方列参数...], }); 表格toolbar 列参数 列operat 参数 说明 类型 是否必填 默认值 备注 class 样式信息 string 否 icon 图标信息 string 否 在行操作里面，不建议使用图标 title 提示信息 string 否 为空则读取text属性 text 文本信息 string 否 为空则读取title属性 method 执行方式 string 否 open open 为弹出层打开 request 为直接请求 url 请求链接 string 是 auth 权限规则 string 是 权限规则，具体请参考配置auth权限验证模块 field 绑定行字段 string 否 id 会自动根据此字段生成链接后缀 extend 扩展属性 string 否 例如弹出层全屏操作，可以加上：data-full=\"true\" 内置templet方法 方法 说明 备注 ea.table.list 根据行的selectList返回对应列表值 一般类型之类的会用到 ea.table.image 显示图片 行参数imageHeight是控制图片的高度 ea.table.url 格式化显示链接 ea.table.switch 生成开关组件 ea.table.price 格式化为价格 ea.table.percent 格式化为百分比 ea.table.icon 显示图标 ea.table.value 格式化数据 多层对象数据的显示 © zhongshaofa all right reserved，powered by Gitbook文件修订时间： 2020-05-16 12:58:35 "},"frontend/table_search.html":{"url":"frontend/table_search.html","title":"table搜索器","keywords":"","body":"相关参数条件大全下拉搜索相关参数 条件大全 下拉搜索 © zhongshaofa all right reserved，powered by Gitbook文件修订时间： 2020-05-16 00:55:48 "},"frontend/listen.html":{"url":"frontend/listen.html","title":"内置监听事件","keywords":"","body":"弹出层直接请求弹出层 直接请求 © zhongshaofa all right reserved，powered by Gitbook文件修订时间： 2020-05-16 00:59:02 "},"frontend/date.html":{"url":"frontend/date.html","title":"日期时间","keywords":"","body":"各种时间处理，简化时间的初始化操作各种时间处理，简化时间的初始化操作 © zhongshaofa all right reserved，powered by Gitbook文件修订时间： 2020-05-16 00:59:02 "},"frontend/select.html":{"url":"frontend/select.html","title":"动态下拉选择","keywords":"","body":"动态生成下拉选择动态生成下拉选择 © zhongshaofa all right reserved，powered by Gitbook文件修订时间： 2020-05-16 00:59:02 "},"frontend/upload.html":{"url":"frontend/upload.html","title":"上传组件","keywords":"","body":"相关参数初始化弹出选择相关参数 初始化 弹出选择 © zhongshaofa all right reserved，powered by Gitbook文件修订时间： 2020-05-16 01:00:00 "},"frontend/editor.html":{"url":"frontend/editor.html","title":"富文本编辑器","keywords":"","body":"相关参数初始化相关参数 初始化 © zhongshaofa all right reserved，powered by Gitbook文件修订时间： 2020-05-16 01:00:00 "},"addons/use.html":{"url":"addons/use.html","title":"插件使用","keywords":"","body":"插件使用插件使用 © zhongshaofa all right reserved，powered by Gitbook文件修订时间： 2020-05-15 22:09:53 "},"addons/dev.html":{"url":"addons/dev.html","title":"插件开发","keywords":"","body":"插件开发插件开发 © zhongshaofa all right reserved，powered by Gitbook文件修订时间： 2020-05-15 22:09:53 "},"base/question.html":{"url":"base/question.html","title":"常见问题","keywords":"","body":"常见问题常见问题 © zhongshaofa all right reserved，powered by Gitbook文件修订时间： 2020-05-15 22:09:53 "}}