{"./":{"url":"./","title":"简介","keywords":"","body":"项目介绍演示站点项目特性特别感谢BUG反馈版权信息QQ交流群项目介绍 EasyAdmin是基于ThinkPHP6.0+Layui的快速开发的后台管理系统。 演示站点 演示地址：http://easyadmin.99php.cn/admindemo（账号：guest，密码：123456。备注：只有查看信息的权限） 项目特性 完善的菜单管理 分模块管理 无限极菜单 菜单编辑会提示权限节点 基于auth的权限管理系统 通过注解方式来实现auth权限节点管理 具备一键更新auth权限节点，无需手动输入管理 完善的后端权限验证以及前面页面按钮显示、隐藏控制 完善的上传组件功能 本地存储 阿里云OSS建议使用 腾讯云COS 七牛云OSS 完善的前端组件功能 对layui的form表单重新封装，无需手动拼接数据请求 对弹出层进行再次封装，以极简的方式使用 对table表格再次封装，在使用上更加舒服 根据table的cols参数再次进行封装，提供接口实现image、switch、list等功能，再次基础上可以自己再次扩展 根据table参数一键生成搜索表单，无需自己编写 完善的后台操作日志 记录用户的详细操作信息 按月份进行分表记录 一键部署静态资源到OSS上 所有在public\\static目录下的文件都可以一键部署 一个配置项切换静态资源（oss/本地） 上传文件记录管理 后台路径自定义，防止别人找到对应的后台地址 特别感谢 以下项目排名不分先后 ThinkPHP：https://github.com/top-think/framework Annotations：https://github.com/doctrine/annotations Layui：https://github.com/sentsin/layui Layuimini：https://github.com/zhongshaofa/layuimini Jquery：https://github.com/jquery/jquery RequireJs：https://github.com/requirejs/requirejs WangEditor：https://github.com/wangfupeng1988/wangEditor Echarts：https://github.com/apache/incubator-echarts BUG反馈 项目使用过程成，如遇到BUG，可通过以下途径进行反馈。 GitHub:https://github.com/zhongshaofa/easyadmin/issues Gitee:https://gitee.com/zhongshaofa/easyadmin QQ群:763822524 版权信息 EasyAdmin遵循MIT开源协议发布，并提供免费使用。 QQ交流群 763822524 加群请备注来源：如gitee、github、官网等。 © zhongshaofa all right reserved，powered by Gitbook文件修订时间： 2019-11-15 18:12:13 "},"base/install.html":{"url":"base/install.html","title":"安装","keywords":"","body":"环境要求git下载伪静态配置环境要求 PHP >= 7.0 Mysql >= 5.5.0 (需支持innodb引擎) Apache 或 Nginx git下载 使用git克隆资源下来 git clone https://github.com/zhongshaofa/easyadmin git clone https://gitee.com/zhongshaofa/easyadmin 网站入口请部署至public文件夹下（即 easyadmin/public 目录下） 手动安装主目录下的easyadmin.sql的数据库文件 复制主目录下的.example.env文件为.env 修改.env的数据库配置信息以及后台入口后台入口配置项为：EASYADMIN.ADMIN 修改伪静态，请参考下方伪静态的配置 运行网站地址+后台入口 伪静态配置 可以通过URL重写隐藏应用的入口文件index.php Apache 把下面的内容保存为.htaccess文件放到应用入口文件的同级目录下 Options +FollowSymlinks -Multiviews RewriteEngine On RewriteCond %{REQUEST_FILENAME} !-d RewriteCond %{REQUEST_FILENAME} !-f RewriteRule ^(.*)$ index.php/$1 [QSA,PT,L] Nginx 在Nginx低版本中，是不支持PATHINFO的，但是可以通过在Nginx.conf中配置转发规则实现 location / { // …..省略部分代码 if (!-e $request_filename) { rewrite ^(.*)$ /index.php?s=/$1 last; } } © zhongshaofa all right reserved，powered by Gitbook文件修订时间： 2019-11-15 18:08:52 "},"base/architecture.html":{"url":"base/architecture.html","title":"架构","keywords":"","body":"架构总览架构总览 EasyAdmin项目目录 ├── addons //插件存放目录 ├── app //应用目录 │ ├── admin //后台管理应用模块 │ ├── common //通用应用模块 │ ├── BaseController.php //控制器基础类 │ ├── common.php //应用公共文件 │ ├── event.php //事件定义文件 │ ├── ExceptionHandle.php //应用异常处理类 │ ├── middleware.php //全局中间件定义文件 │ ├── provider.php //容器Provider定义文件 │ ├── Request.php //应用请求对象类 ├── extend //扩展辅助类目录 ├── public │ ├── static │ │ ├── admin //后台静态资源，js/css/images │ │ ├── common //公共资源 │ │ ├── plugs //插件资源 │ └── uploads //上传文件目录 │ ├── index.php //应用入口主文件 │ └── router.php ├── runtime //缓存目录 ├── vendor //Compposer资源包位置 │ ├── zhongshaofa │ │ ├── easy-addons //插件扩展 │ │ ├── easy-admin //后台扩展 ├── view │ │ ├── admin //后台视图页面 │ │ ├── index //前台视图页面 ├── LICENSE ├── README.md ├── easyadmin.sql //数据库安装文件 ├── build.php ├── composer.json //Composer包配置 └── think © zhongshaofa all right reserved，powered by Gitbook文件修订时间： 2019-11-18 13:59:05 "},"config/system.html":{"url":"config/system.html","title":"系统配置","keywords":"","body":"系统配置超管配置系统配置 env配置说明 APP_DEBUG = true [APP] DEFAULT_TIMEZONE = Asia/Shanghai [DATABASE] TYPE = mysql HOSTNAME = host.docker.internal DATABASE = easyadmin USERNAME = root PASSWORD = root HOSTPORT = 3306 CHARSET = utf8 DEBUG = true PREFIX = ea_ [LANG] default_lang = zh-cn [EASYADMIN] ADMIN = admintest CAPTCHA = false CDN = EXAMPLE = true OSS_STATIC_PREFIX = static_easyadmin EASYADMIN.ADMIN：后台路径 EASYADMIN.CAPTCHA：是否开启验证码 EASYADMIN.CDN：静态资源地址 EASYADMIN.EXAMPLE：是否为演示环境 EASYADMIN.OSS_STATIC_PREFIX：静态资源上传前缀 超管配置 超管不受权限控制，默认获取所有权限 账号配置 配置文件位置：app/common/constants/AdminConstant.php 修改常量：SUPER_ADMIN_ID 管理员对应ID © zhongshaofa all right reserved，powered by Gitbook文件修订时间： 2019-11-18 12:38:17 "},"config/auth.html":{"url":"config/auth.html","title":"权限忽略配置","keywords":"","body":"权限忽略配置权限忽略配置 登录判断和权限验证忽略配置 配置文件位置：app/admin/config/admin.php [ 'login', ], // 不需要验证登录的节点 'no_login_node' => [ 'login/index', 'login/out', ], // 不需要验证权限的控制器 'no_auth_controller' => [ 'ajax', 'login', 'index', ], // 不需要验证权限的节点 'no_auth_node' => [ 'login/index', 'login/out', ], ]; no_login_controller：不需要验证登录的控制器 no_login_node：不需要验证登录的节点 no_auth_controller：不需要验证权限的控制器 no_auth_node：不需要验证权限的节点 控制器和节点是一个并关系，如果控制器在二级目录下，写法应该为：system/config （对应位置：app/admin/controller/system/Config.php） © zhongshaofa all right reserved，powered by Gitbook文件修订时间： 2019-11-18 10:10:54 "},"config/static.html":{"url":"config/static.html","title":"静态资源配置","keywords":"","body":"静态资源配置静态资源配置 目前只写了阿里云的静态资源配置。 修改静态资源为OSS，会有效减轻服务器压力，并提高资源加载速度（特别是带宽低的服务器） 步骤 1、在后台修改文件上传为阿里云，并修改对应的配置项 2、修改.nev文件下的配置： EASYADMIN.CDN：静态资源地址（例如：https://easyadmin.oss-cn-shenzhen.aliyuncs.com/static_easyadmin） EASYADMIN.OSS_STATIC_PREFIX：静态资源上传前缀（例如：static_easyadmin） 3、在项目的主目录下执行：php think OssStatic，就会将public/static路径下的所有静态资源上传上去 4、删除该目录下runtime/admin/cache的缓存资源 © zhongshaofa all right reserved，powered by Gitbook文件修订时间： 2019-11-18 13:49:17 "},"database/database.html":{"url":"database/database.html","title":"数据库","keywords":"","body":"命名规范命名规范 好的命名规范会让你开发起来更加心情开朗，下面是一些建议： 表名 命名规则：前缀+模块+标识 例如： ea_system_admin ea_system_config ea_blog_user ea_blog_config 字段 create_time、update_time、delete_time三个字段以int类型保存时间信息 © zhongshaofa all right reserved，powered by Gitbook文件修订时间： 2019-11-18 11:46:38 "},"backend/controller/annotations.html":{"url":"backend/controller/annotations.html","title":"注解权限","keywords":"","body":"注解权限注解权限 注解权限只能获取后台的控制器，也就是该app/admin/controller下 控制器注解权限 控制器类注解tag @ControllerAnnotation 注解类： EasyAdmin\\annotation\\ControllerAnnotation 作用范围： CLASS 拥有属性： title 控制器的名称（必填） auth 是否开启权限控制，默认为true （选填，Enum:{true, false}） 示例 备注：注解前请先引用use EasyAdmin\\annotation\\ControllerAnnotation; 方法节点注解权限 方法节点类注解tag @NodeAnotation 注解类： EasyAdmin\\annotation\\NodeAnotation 作用范围： METHOD 拥有属性： title 方法节点的名称（必填） auth 是否开启权限控制，默认为true （选填，Enum:{true, false}） 示例 备注：注解前请先引用use EasyAdmin\\annotation\\NodeAnotation; © zhongshaofa all right reserved，powered by Gitbook文件修订时间： 2019-11-18 10:34:11 "},"backend/controller/curd.html":{"url":"backend/controller/curd.html","title":"Curd trait引入","keywords":"","body":"Curd trait引入Curd trait引入 文件位置：app/admin/traits/Curd.php 默认的CURD方法有： index：列表 add：添加 edit：编辑 del：删除 modify：属性修改 使用方法 在类里面直接引入use \\app\\admin\\traits\\Curd; 初始化当前模型 引入use EasyAdmin\\annotation\\NodeAnotation;,（备注：因为方法内有使用到注解，至少要引入该类，不然会在节点更新的时候报出异常） 示例 model = new SystemConfig(); } } 修改覆盖 因为默认的Curd只能适用于单表，如果不适用你的场景，请复制app/admin/traits/Curd.php文件内容到你的控制器覆盖修改。 modify属性修改限制 为了安全，modify方法默认允许修改的字段有： status sort remark is_delete is_auth title 如果该方法不适用你的场景请修改：SystemConstant::ALLOW_MODIFY_FIELD，或者在modify方法内取消限制。 文件位置：app/common/constants/SystemConstant.php © zhongshaofa all right reserved，powered by Gitbook文件修订时间： 2019-11-18 11:06:02 "},"backend/controller/validate.html":{"url":"backend/controller/validate.html","title":"验证器使用","keywords":"","body":"验证器使用验证器使用 此验证器的使用只针对于后台控制器 需要先继承该类app\\common\\controller\\AdminController 示例 验证规则的编写参考ThinkPHP的文档 调用validate方法进行验证，如果验证未通过，会直接调用$this->error();方法 request->post(); $rule = [ 'username|用户名' => 'require', 'password|密码' => 'require', ]; $this->validate($post, $rule); $this->success('成功'); } } © zhongshaofa all right reserved，powered by Gitbook文件修订时间： 2019-11-18 11:05:29 "},"frontend/base.html":{"url":"frontend/base.html","title":"必看基础信息","keywords":"","body":"必看基础信息后台控制器与JS的绑定必看基础信息 系统做了一些封装，先查看此文档会有效解决你的疑问 后台控制器与JS的绑定 控制器中JS的目录对应为：public/static/admin/js 文件命名为小写+下划杠 控制器的每一个方法对应JS的Controller对象的一个属性 每一个JS文件都需要引入admin模块，并执行监听admin.listen();; 例子 define([\"jquery\", \"admin\",], function ($, admin) { var init = { table_elem: 'currentTable', table_render_id: 'currentTableRenderId', index_url: 'system.admin/index', add_url: 'system.admin/add', edit_url: 'system.admin/edit', del_url: 'system.admin/del', modify_url: 'system.admin/modify', }; var Controller = { index: function () { admin.table.render({ elem: '#' + init.table_elem, id: init.table_render_id, url: admin.url(init.index_url), init: init, toolbar: ['refresh', 'add', 'delete'], cols: [[ {type: \"checkbox\"}, {field: 'id', width: 80, title: 'ID', sort: true, align: \"center\"}, {field: 'username', minWidth: 80, title: '登录账户', align: \"center\"}, {field: 'head_img', minWidth: 80, title: '头像', search: false, imageHeight: 40, align: \"center\", templet: admin.table.image}, {field: 'phone', minWidth: 80, title: '手机', align: \"center\"}, {field: 'login_num', minWidth: 80, title: '登录次数', align: \"center\"}, {field: 'remark', minWidth: 80, title: '备注信息', align: \"center\"}, {field: 'status', title: '状态', width: 85, align: \"center\", search: 'select', selectList: {0: '禁用', 1: '启用'}, filter: 'status', templet: admin.table.switch}, {field: 'create_time', minWidth: 80, title: '创建时间', align: \"center\", search: 'range'}, { width: 250, align: 'center', title: '操作', init: init, templet: admin.table.tool, operat: ['edit', [ { class: 'layui-btn layui-btn-normal layui-btn-xs', text: '设置密码', open: 'system.admin/password', auth: 'system.admin/password', extend: \"\" } ], 'delete' ] } ]], }); admin.listen(); }, add: function () { admin.listen(); }, edit: function () { admin.listen(); }, password: function () { admin.listen(); } }; return Controller; }); © zhongshaofa all right reserved，powered by Gitbook文件修订时间： 2019-11-18 14:48:50 "},"frontend/auth.html":{"url":"frontend/auth.html","title":"auth权限验证","keywords":"","body":"auth权限验证auth权限验证 为什么前端也做权限认证，权限认证不应该是后端做的吗？ 这里的权限认证指的是前端判断是否有权限查看的数据（例如：添加、删除、编辑之类的按钮），这些只有在点击到对应的url之后，后端才会进行权限认证。 为了避免用户困扰，可以在此用上前端的权限认证，判断是否显示还是隐藏 例子 添加上auth=\"system.menu/add\" 如果页面中没有引入public/static/admin/css/public.css样式文件，需要手动添加该样式[auth] { display: none; } 在对应的js文件内引入admin模块，并执行admin.listen();进行监听 添加 © zhongshaofa all right reserved，powered by Gitbook文件修订时间： 2019-11-18 14:21:11 "},"frontend/form.html":{"url":"frontend/form.html","title":"form表单","keywords":"","body":"form表单form表单 form表单已经集成了快速验证以及提交的方法，无需手动重组数据再进行提交 默认提交的数据是提交当前url，如需提交到其它页面，修改一下lay-submit的值即可 在对应的js文件内引入admin模块，并执行admin.listen();进行监听例子1 {extend name=\"public:iframe\" /} {block name=\"cotent\"} 权限名称 确认 重置 {/block} 例子2 {extend name=\"public:iframe\" /} {block name=\"cotent\"} 权限名称 确认 重置 {/block} © zhongshaofa all right reserved，powered by Gitbook文件修订时间： 2019-11-18 14:27:32 "},"frontend/table.html":{"url":"frontend/table.html","title":"table列表","keywords":"","body":"table列表表格上方搜索器的自动生成表格内部操作栏的自动生成表格左上方操作栏的自动生成其它api接口自行扩展table列表 虽然layui已经提供了很多方便的方法，但是还是不够简便，目前系统对layui table模块进行了重新封装，并兼容所有的layui table的方法。 使得开发起来更加得心应手，减轻工作量。 东西有点多，一时半会写不完，有空再写。。。。。 表格上方搜索器的自动生成 示例 define([\"jquery\", \"admin\",], function ($, admin) { var init = { table_elem: 'currentTable', table_render_id: 'currentTableRenderId', index_url: 'system.admin/index', add_url: 'system.admin/add', edit_url: 'system.admin/edit', del_url: 'system.admin/del', modify_url: 'system.admin/modify', }; var Controller = { index: function () { admin.table.render({ elem: '#' + init.table_elem, id: init.table_render_id, url: admin.url(init.index_url), init: init, toolbar: ['refresh', 'add', 'delete'], cols: [[ {type: \"checkbox\"}, {field: 'id', width: 80, title: 'ID', sort: true, align: \"center\"}, {field: 'username', minWidth: 80, title: '登录账户', align: \"center\"}, {field: 'head_img', minWidth: 80, title: '头像', search: false, imageHeight: 40, align: \"center\", templet: admin.table.image}, {field: 'phone', minWidth: 80, title: '手机', align: \"center\"}, {field: 'login_num', minWidth: 80, title: '登录次数', align: \"center\"}, {field: 'remark', minWidth: 80, title: '备注信息', align: \"center\"}, {field: 'status', title: '状态', width: 85, align: \"center\", search: 'select', selectList: {0: '禁用', 1: '启用'}, filter: 'status', templet: admin.table.switch}, {field: 'create_time', minWidth: 80, title: '创建时间', align: \"center\", search: 'range'}, { width: 250, align: 'center', title: '操作', init: init, templet: admin.table.tool, operat: ['edit', [ { class: 'layui-btn layui-btn-normal layui-btn-xs', text: '设置密码', open: 'system.admin/password', auth: 'system.admin/password', extend: \"\" } ], 'delete' ] } ]], }); admin.listen(); }, }; return Controller; }); 表格内部操作栏的自动生成 表格左上方操作栏的自动生成 其它api接口 自行扩展 © zhongshaofa all right reserved，powered by Gitbook文件修订时间： 2019-11-18 14:38:44 "},"frontend/editor.html":{"url":"frontend/editor.html","title":"富文本编辑器","keywords":"","body":"富文本编辑器富文本编辑器 © zhongshaofa all right reserved，powered by Gitbook文件修订时间： 2019-11-15 16:47:05 "},"addons/use.html":{"url":"addons/use.html","title":"插件使用","keywords":"","body":"插件使用插件使用 © zhongshaofa all right reserved，powered by Gitbook文件修订时间： 2019-11-15 16:47:05 "},"addons/dev.html":{"url":"addons/dev.html","title":"插件开发","keywords":"","body":"插件开发插件开发 © zhongshaofa all right reserved，powered by Gitbook文件修订时间： 2019-11-15 16:47:05 "},"base/question.html":{"url":"base/question.html","title":"常见问题","keywords":"","body":"常见问题常见问题 © zhongshaofa all right reserved，powered by Gitbook文件修订时间： 2019-11-15 16:47:05 "}}